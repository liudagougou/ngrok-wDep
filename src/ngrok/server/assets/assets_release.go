// Code generated by go-bindata.
// sources:
// assets/server/tls/snakeoil.crt
// assets/server/tls/snakeoil.key
// DO NOT EDIT!

// +build release

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsServerTlsSnakeoilCrt = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x93\xb9\xf2\xaa\x4a\x10\x87\x73\x9e\xe2\xe6\xd4\x2d\x05\x64\x31\x38\xc1\x0c\x0c\x30\xc0\xb0\xe8\x20\x4b\x26\x3b\xf2\x57\x44\xc4\x11\x9f\xfe\x7a\x4e\x70\x93\xd3\xd1\xaf\xbe\xea\xa0\xbb\xba\xbf\x7f\x7f\x17\x44\x16\xf6\xff\xd1\xd1\x81\x62\x13\xeb\x80\xa2\x3f\x94\x23\x18\xeb\xf3\x45\xd7\x41\x3e\xea\x7a\xa4\xab\x4f\x5e\xd9\x3f\x8e\x17\xba\x37\x80\x0f\xdb\x61\xea\x86\xde\xda\xb3\x2d\x04\x51\x6c\x02\x03\x14\xe4\x30\x30\x93\x65\xc6\x29\x8a\x0c\x03\xc2\x2d\x57\x25\xf2\x92\x27\x6c\x29\xed\x83\x54\x48\x60\xa9\xed\x1f\x85\xc0\x5d\x6a\x50\x24\x10\x8a\x57\xff\x02\x44\xdf\x18\x98\x6f\x8e\x5f\x86\x65\xf2\xcd\xe4\xf3\x3f\x63\x9c\xf5\x41\x39\x81\xa5\x05\x84\x18\x01\xc6\xa2\xca\x3e\x2d\xc5\xf5\x34\x7b\x37\xb8\xad\xc4\x3d\xf3\x6e\x9d\x5c\xff\x9e\xf0\x88\x99\x11\x65\x8e\x3b\xe6\xb8\x7b\x95\x3e\x88\x10\x84\x11\x30\xb8\xb6\x45\x21\x30\xbe\x0d\xd1\xa8\x7f\x33\x04\x1e\x4a\x56\x3b\xb8\xac\xaa\xaa\x9b\x7d\xbd\x86\xd2\xbd\x17\x8b\x10\xce\xf2\xdb\xa8\xab\xcf\xa7\xd4\x10\x59\x83\x34\x46\x9f\xf8\x51\xbe\x1d\x9d\xf3\xcc\x72\x60\x55\xd4\xe8\xd9\xb9\x20\xb4\x5f\x24\xbc\x99\x42\x49\xd9\x8d\x09\x7c\xb4\xbd\x1d\x39\xa3\x69\x6c\x1b\x5a\xae\x64\x50\xe6\x5a\xb4\x83\x1e\xcc\xe8\xfe\xa6\x29\xe1\xf5\x01\xd9\x3a\xe7\xb0\xe7\x46\x1c\xf7\x30\x3b\xc6\xca\x67\xec\xe7\x60\x3a\x44\x9a\xb7\x0e\xa2\x5b\xf2\x33\x1b\x7d\xe9\xbd\xcb\x65\x95\x0e\xfd\xcd\xbf\x3c\x1e\xc3\x4c\x92\x41\x2a\xeb\x36\xa0\xcf\xa0\xa3\xc5\x32\x72\x39\x96\x16\x59\x0d\x72\x3f\x5c\xc4\x78\xc7\x57\xde\x46\xb4\xb2\x63\x70\x66\x1b\x25\xda\x60\x2a\x6a\x3f\x73\xdc\x74\xc4\x02\x65\x8d\x1d\x2b\x31\x12\x77\xbc\x2a\xb6\x8b\xee\x5a\x9f\x7e\xb4\x47\xc6\xa9\x3b\x21\x1d\x31\x7e\x9c\xb5\x5a\x51\xf0\x38\xd6\x20\xb0\x2c\xc4\x43\x5e\xe0\xe5\x9e\x57\x51\x38\x2f\x3b\x7f\x43\x09\xbc\xa7\xf1\xa2\x34\xd3\x29\xf4\x98\x07\x33\x4d\x97\x26\x7b\xd2\x83\x89\x53\x3f\x73\xff\x93\xd1\x37\x22\x0b\x01\x72\x5d\x4a\x0c\x2f\x0d\x6a\x8c\x0f\x3d\x97\x9b\x6e\x2d\x3a\xff\xc6\x06\x73\xd6\x01\x43\x00\xd0\xbf\x7f\x83\x03\x20\xf8\x5e\x00\x01\xfb\xd4\x5a\xe8\x95\x59\xb4\x9d\x32\xea\x05\x47\x1a\xe0\x09\xd6\xc8\xde\x19\xc6\xc5\x05\xcd\xb6\xbc\xf5\x97\xfb\x70\x72\x3e\xd5\xb8\x74\x09\x40\x43\xde\x09\x15\xfb\x29\xb9\x45\x63\x8d\x57\xbd\x9e\x6d\x75\x8c\xc0\xca\x60\xca\x9c\x24\xb5\xe9\x1a\xbc\xa5\x3a\xdb\x5c\x66\x77\x43\x7c\x25\xc3\xb9\x1b\x46\x66\x0b\xa4\xd9\xd2\x3a\xc6\xbf\x0e\xed\x55\x08\x89\x28\x36\x57\xee\x1e\x35\xbd\x4c\x86\x86\x6f\x9d\x7b\x5a\x80\x68\x3d\x37\x8a\xd5\x4d\xbc\xb3\x1c\xe1\xbe\xed\xeb\xd7\x55\xf2\x3b\x00\xf3\x72\x56\x3c\x54\xc6\x06\x74\xc0\x31\xb6\xdd\xbb\xd1\xc4\x38\x12\xe6\x90\x3b\xdf\x44\x9c\xaa\x25\xc6\xb3\xfb\xd2\xca\xdb\x4f\x70\x91\xcd\xf8\xb6\x96\xd2\x65\x12\x9c\xef\x8e\x86\x64\x6e\x4f\x75\x57\xdd\x84\x3c\xe5\x97\xb7\xa4\x4a\xe1\x63\x58\xe0\x51\x35\x51\xd1\x81\xc6\xe6\x74\x1e\x25\x0a\x2b\xb4\x94\x98\x57\x49\x70\x5f\xc1\x7c\x20\x4f\x26\xf7\x1b\xef\x6c\x7a\xd6\x6d\xd1\x7d\xbf\x89\xd5\xb9\xd0\x8a\xb3\x29\xcd\xc2\xeb\x1c\x2b\x61\x0c\xc2\x2b\x3e\x25\x7d\x95\xb6\x2e\xf7\x0c\xe3\xaa\x0e\x5f\x47\x9d\xba\x27\x77\x6f\x0b\xc5\x96\xd4\x2d\xd4\x69\x60\xaf\x23\x8c\x7e\xfd\xe2\xfe\x48\x8b\x7c\xe3\x6f\x91\xff\x0b\x00\x00\xff\xff\xb9\xaf\xbc\xa2\xe5\x03\x00\x00"

func assetsServerTlsSnakeoilCrtBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilCrt,
		"assets/server/tls/snakeoil.crt",
	)
}

func assetsServerTlsSnakeoilCrt() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.crt", size: 997, mode: os.FileMode(436), modTime: time.Unix(1451112544, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilKey = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xc7\xce\x83\x58\xb3\x45\xe7\x3c\x45\xcf\xad\x2b\x30\x98\x34\x3c\xc0\x01\x93\xa3\xb1\x61\x66\x72\x32\x99\x43\x78\xfa\xfb\x75\x8f\xff\x9a\x96\x4a\x5a\xaa\xad\xad\xf5\x7f\xff\x8e\x00\x15\xd5\xfa\xc7\xf3\xc1\x3f\x8e\xa7\x86\x20\x80\xff\xe8\x30\xfa\x6f\x83\x99\xaa\x0a\x87\x5d\x15\x00\xd0\x45\xe0\x42\xb0\x78\x89\x9a\x32\x8e\x81\x16\xf5\xad\xb1\x2a\x9e\xff\x8c\x78\xe1\x94\xab\x87\x16\x4d\x39\xd6\xb5\xbb\x97\x4a\x67\x6e\x60\xf9\xeb\x05\x5b\x75\xc1\xc2\x33\x10\xee\x02\xa7\x55\xe3\x72\xd8\x3a\x9b\x36\xb7\x01\x2f\xe6\xba\x8a\x94\x4d\x54\x33\xf0\x2b\x5f\x8e\xc7\x5b\x97\x7a\x06\xd3\xc1\x46\x29\xa3\x8a\xbb\xdf\xcb\x56\x7a\x3d\x74\xd7\x4d\xd5\x1e\x13\x29\xfc\xdb\x10\x72\xa5\x05\xb3\x5d\xeb\x3b\x33\xca\xd2\x8e\xf4\x20\x1a\x2f\xe6\x12\x4b\xaa\x78\x56\x7d\xbf\xda\xbe\x9e\x92\xf6\xb6\xf9\xfb\xf1\x0d\xb2\x83\x01\xb4\x4d\x30\xb2\xb5\x31\x55\x8b\x35\x39\xdb\x2f\x74\x4b\xdc\xd8\x38\x68\x68\x02\xe1\x51\x5c\xa9\xf4\x2c\xe1\xa3\xc4\x55\x4e\x72\xbe\x0f\xef\x06\xf7\x48\x38\x1e\x65\x1b\x47\x56\x34\xd5\xc9\x90\x0e\x7e\x7f\x6a\x85\x73\xae\x0d\xc2\x9a\x30\x2f\xcb\x7a\x9d\x0f\x76\x1e\xea\xba\x7a\x80\x47\x14\x05\x8f\x27\xfb\x61\x7f\x06\xbb\xb8\xb7\x93\x2d\x29\xde\xdc\x95\x2e\xf3\xd9\xf1\x36\xbe\x38\x04\x16\xb9\xd9\x8d\x7c\xc8\x07\x95\x99\x11\x66\x9f\x7a\x58\x39\xd0\x3d\x1f\xbb\xd4\xd1\x57\x01\x6a\x9a\xf3\x38\xc7\xb2\xc6\xeb\xf6\xd4\x36\x48\x16\xa2\xfb\xde\x55\x09\xb8\x40\x00\xc3\xdf\xb3\x21\xd3\x99\x5a\x7c\x4e\xf3\xd1\x13\x34\x94\xb0\xe6\xe2\xbf\xc0\x4b\xd2\xa5\xab\xc8\x1c\xad\xb6\x73\x10\x00\x44\xde\x07\xe7\x1c\x60\x78\xe1\x81\x6e\x72\xf1\xd3\x5a\x73\xa7\x09\x8e\x37\x87\xa8\xab\x3b\x84\x22\x22\x6a\xb8\x29\x08\x25\xdd\xc7\xa4\x7b\x9e\xf3\xb8\xf6\xbc\x10\xfe\x11\xdb\x22\x18\xee\x0e\xf8\x6c\x3c\xce\x55\xb3\x0f\x44\x09\x8a\xc9\x4b\x9d\xb3\xef\x0c\xdf\x93\xea\xc3\x39\xb2\x2b\x36\xb6\x48\x01\x27\x3c\x64\x99\xb4\xab\x60\xc5\x4e\xd8\x66\xfd\xfc\x12\xaf\xcf\xa7\x6c\x5c\x35\x0c\x43\xf9\x71\xcf\xcc\x2f\x69\xdd\x62\x7f\x82\x9f\xdd\x97\xb9\x6c\xbd\xf2\xfb\x6f\xb0\xdb\x63\x22\x05\xf0\x59\xfc\x5f\xa0\xd4\xe5\xab\xe0\xe5\x0c\xd3\x0e\x72\xba\xc8\x00\x3e\x57\xc3\xa9\x67\x33\xa3\x1e\x50\xe7\x03\x4f\x10\x7c\x96\x5a\x74\x02\xf8\x62\xdd\x0f\xbe\x4d\xb9\x68\x7f\x84\xe9\x1b\xa6\x88\xb5\x51\x76\xec\x4d\x1f\xb0\x13\xe5\xb9\x18\xcf\x70\x49\xc8\xe0\xc6\x46\x9b\x64\xc1\x9a\x35\xea\x5f\xe2\x5d\x33\x71\xef\xf9\x1e\x8f\xaa\xca\xdd\xeb\xef\xa0\x7a\xe9\x6c\x2e\x47\x8a\xc2\x79\xaf\x0e\x28\x61\xaf\x4f\x3c\xa9\x29\x85\x30\xff\x30\xe9\xeb\x94\x70\x6e\xc5\x32\x82\x80\xec\x56\x54\x9d\x60\xc4\xa9\x9a\x97\x23\x53\x37\x2a\x94\xfd\x1e\x57\x5c\x3c\x34\x23\xa5\xc4\xf7\xa0\x59\xbe\x1c\x07\x29\x52\xdd\x27\xe5\x4f\x42\x5b\xc4\x1d\x06\x3f\x3a\x05\x79\x71\xfa\xf8\x36\x2c\xa3\xdd\x91\xab\x31\x90\x3e\xa5\xfa\xf5\x4f\x21\xb2\x5d\xe2\xbb\xc6\x46\x76\x5c\xc6\xa3\x7f\x2b\x54\x9b\x54\xaf\x91\x66\xd1\xd2\xa4\x87\x4c\x12\x02\x6c\x59\x0c\x1e\xf3\x71\x22\x27\xfb\xba\x4f\x23\xe8\x84\x2d\x0e\xb3\x99\x14\x1e\x67\x00\xe8\x96\xfa\xa8\xd0\xf7\x29\x23\x30\xaa\xf9\x99\xde\x60\x7a\x89\x53\x04\x67\x79\x31\xb8\xff\x88\x2f\xfa\x11\x61\x49\xbd\xd7\x48\xdb\x78\x0e\xdc\x5b\x9c\xfa\x4d\x93\xb9\x2a\x62\xa5\x7a\x43\xbe\x57\x49\xeb\x49\x36\xde\x14\x15\x8c\xb4\x00\xfd\x25\x0c\xe5\xb5\x97\xce\x9f\x94\x11\x78\x27\x97\x0b\xfd\x0a\x43\xcc\x22\x8f\xc5\xb3\xb3\x85\xd2\x15\xf1\xb8\xa5\xf2\x72\x39\x53\xf5\x06\x5d\x61\xae\x2d\x23\xb2\xfa\x62\xe4\x52\x1d\xa8\xdc\xd9\xd8\xab\x71\xbf\x07\xc5\x74\xcf\xb8\xcd\x92\xed\x42\x79\x49\x44\xbf\x61\x8d\x35\x56\xab\x70\x5b\xd8\x5e\x6d\x07\xa5\xe0\xc5\x84\xad\xeb\x8b\xfb\x31\xc7\x7d\x10\x54\xfd\x1e\x16\xdd\xf6\x25\x5f\x7f\xc8\xa0\x23\xcf\xca\xdd\x91\x24\x8b\x5c\xbe\x04\xde\x3b\x45\x96\x0b\x31\x94\x9c\x4e\xaa\x87\x83\x2c\x1a\xe3\xf3\x26\x57\xee\x33\x5f\x92\x93\xbf\xdf\x07\x9d\x30\xa2\x37\xd4\xff\xea\xf0\x87\x6d\xe2\x41\x58\x9d\xb0\x5a\xfd\x81\x73\x1a\xa3\x8f\xda\x4a\x24\x9e\xf1\x01\x30\xe2\x33\xa0\x47\xb7\x6f\xbd\xf1\x76\x9e\xec\x97\x43\x35\x3c\x45\xf9\xb2\xe8\xbe\x19\x8d\x10\x8a\x9d\xcd\xeb\x65\x27\xfd\x8a\x78\x69\xe6\x69\x08\x01\x7b\x71\x8b\x7d\x93\x62\xc1\x22\x7e\x76\xaf\x61\x41\xd5\x4e\x4c\x1e\x45\x36\x42\x74\xf5\x3c\x3a\x3f\x94\x5d\xe4\xea\x42\xe9\x8a\xa0\x8f\x6a\x92\x7a\xe8\x71\xb4\xbc\x89\xef\x59\x78\x32\x9e\xe0\x0f\x10\x82\x32\x4b\xd5\xe2\x8a\xa7\x86\x83\x27\xc6\x2c\xc9\x6b\x21\xc7\xef\xd5\xf1\x31\xdf\x8c\x4f\xb2\xa5\x07\xb3\xd3\x0d\x24\xe3\x6c\x0f\xe6\x2a\x49\xc6\x68\xf2\xa1\xea\x9a\x3f\x66\x5b\x5c\xdb\x9c\xc1\xc4\x67\x45\xe3\xb7\xd2\xbd\xb5\xb8\x0a\xdb\x65\xf2\x2f\x0e\x59\x88\xf3\xe2\x91\x8f\x30\xa6\x62\xba\x5c\xc5\x32\x48\x25\x0b\xb5\x41\x2c\x27\x71\x8e\x2c\x6f\xbf\x4b\x9b\x51\xac\x37\xa4\xbf\xcd\x97\x7b\x81\x95\x16\xc2\x4d\x3e\x38\x8e\xc3\xac\xdf\xee\xe0\xff\x22\xcb\xd6\x75\xca\x8c\x96\x8f\x34\xb9\x77\x60\xfc\x71\xce\x70\xd3\x7e\x2e\xab\x84\x0d\x20\xcb\x6c\x37\x14\xd5\x8d\xc7\xf1\x96\xdf\xb6\x27\x69\xf4\x4c\xdf\x76\x3f\x11\x2d\xd8\x00\x51\x3d\xd4\xc5\x19\x5d\xe5\x58\xe9\x4a\xf9\xd1\xa2\xf9\xb5\x85\xc6\xb4\xb7\x12\x89\xf2\x7a\x0a\x65\x69\x00\x38\x07\xf1\xcf\xc5\xdc\xb2\xbe\x5d\xd7\x45\x5c\x6d\x9d\x7a\x43\x77\x48\x54\x1e\x5b\x86\x52\x79\x5d\xaf\xad\x38\xde\xb6\xde\x70\xb3\x98\x96\xc3\xc0\xd2\x9d\x2c\x94\xa0\x12\x9e\x56\x7b\xbf\x17\x06\x79\xcf\xa5\xa0\x48\x60\xdb\xe1\x6a\x67\xcc\xd8\x7f\x4a\x81\x96\xf4\xbf\x55\xf3\xff\x01\x00\x00\xff\xff\xa2\x8b\x3c\x0a\x8b\x06\x00\x00"

func assetsServerTlsSnakeoilKeyBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilKey,
		"assets/server/tls/snakeoil.key",
	)
}

func assetsServerTlsSnakeoilKey() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.key", size: 1675, mode: os.FileMode(436), modTime: time.Unix(1451112544, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/server/tls/snakeoil.crt": assetsServerTlsSnakeoilCrt,
	"assets/server/tls/snakeoil.key": assetsServerTlsSnakeoilKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			"tls": &bintree{nil, map[string]*bintree{
				"snakeoil.crt": &bintree{assetsServerTlsSnakeoilCrt, map[string]*bintree{}},
				"snakeoil.key": &bintree{assetsServerTlsSnakeoilKey, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

